#0-add_integer.txt

===================
How to use 0-add_integer.py
==========================

This module defines a function for adding integers ``def add_integer(a, b=98)``.

Usage
=====
``add_integer(...)``gives the sum of two arguments.For numbers,
the sum is equal to using the ``+`` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer

	>>> add_integer(1, 2)
	3

::

	>>> add_integer(2, -4)
	-2

It also works with floats

::
	>>> add_integer(3.0, 2.0)
	5

Floats have to be casted into integers before addition

::

	>>> add_integer(3.5 , 2.0)
	5

::

	>>> add_integer(-3.5, -0.1)
	-3

Floats can be used with integers

::

	>>> add_integer(3.0 , 5)
	8

When the second argument is not provided, the default which is 98 is used

::

	>>> add_integer(2)
	100


Non-Numbers
===========

``add_integer()`` expects both its values to be floats/ integers.
If non-numbers like strings are used, a TypeError is raised:

::

	>>> add_integer("one", 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

::
	
	>>> add_integer(1, "two")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

::

	>>> add_integer(None, 2)
        Traceback (most recent call last):
        TypeError: a must be an integer

::

	>>> add_integer(2, None)
        Traceback (most recent call last):
        TypeError: b must be an integer

If both values are non-integers, a TypeError will only be raised to the first value

::

	>>> add_integer("one", "two")
	Traceback (most recent call last):
	TypeError: a must be an integer


If infinity is provided as an argument, the function fails

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::
	>>> add_integer(2, float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

The function also fails when used with NaN

::
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(5, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
